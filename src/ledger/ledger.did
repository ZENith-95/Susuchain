type Account = record {
    owner : principal;
    subaccount : opt blob;
};

type TransferArgs = record {
    to : Account;
    fee : opt nat;
    memo : opt blob;
    from_subaccount : opt blob;
    created_at_time : opt nat64;
    amount : nat;
};

type TransferError = variant {
    GenericError : record { message : text; error_code : nat };
    TemporarilyUnavailable;
    BadBurn : record { min_burn_amount : nat };
    Duplicate : record { duplicate_of : nat };
    BadFee : record { expected_fee : nat };
    CreatedInFuture : record { ledger_time : nat64 };
    TooOld;
    InsufficientFunds : record { balance : nat };
};

type TransferResult = variant {
    Ok : nat;
    Err : TransferError;
};

type ApproveArgs = record {
    fee : opt nat;
    memo : opt blob;
    from_subaccount : opt blob;
    created_at_time : opt nat64;
    amount : nat;
    expected_allowance : opt nat;
    expires_at : opt nat64;
    spender : Account;
};

type ApproveError = variant {
    GenericError : record { message : text; error_code : nat };
    TemporarilyUnavailable;
    Duplicate : record { duplicate_of : nat };
    BadFee : record { expected_fee : nat };
    AllowanceChanged : record { current_allowance : nat };
    CreatedInFuture : record { ledger_time : nat64 };
    TooOld;
    Expired : record { ledger_time : nat64 };
    InsufficientFunds : record { balance : nat };
};

type ApproveResult = variant {
    Ok : nat;
    Err : ApproveError;
};

service : {
    icrc1_balance_of : (Account) -> (nat) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_fee : () -> (nat) query;
    icrc1_metadata : () -> (vec record { text; variant { Nat : nat; Int : int; Text : text; Blob : blob } }) query;
    icrc1_minting_account : () -> (opt Account) query;
    icrc1_name : () -> (text) query;
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;
    icrc1_symbol : () -> (text) query;
    icrc1_total_supply : () -> (nat) query;
    icrc1_transfer : (TransferArgs) -> (TransferResult);
    icrc2_approve : (ApproveArgs) -> (ApproveResult);
}